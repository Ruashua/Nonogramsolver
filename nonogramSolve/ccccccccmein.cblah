#include <stdio.h> //
//#include <fstream>
//#include <sstream>
#include <string.h> //
#include <time.h>  //
#include <math.h>
#include "Puzzle.h"
#include "Globals.h"

char* colorHexToRgb(char hexColor[]);  

void readFile(Puzzle* puzzle, char* filePath)
{
	char* line[] = "";
	char element[] = "";
	char color[] = "";
	char value[] = "";
	int w, h, c;
	char* b = "";
	int i, j;
	FILE* inputFile;
	c = 0;
	b = DEFAULTBGCOLOR;
	

	inputFile = fopen(filePath, "r");  //ifstream inputFile(filePath);
	if (inputFile == NULL)
	{
		puts("Trouble opening file");
	}
	else
	{

	}
	if (inputFile.is_open())
	{
		getline(inputFile, line);
		istringstream dim(line);
		getline(dim, element, ',');
		w = stoi(element);
		getline(dim, element, ',');
		h = stoi(element);

		getline(inputFile, line);
		if (line != "")
		{
			c = count(line.begin(), line.end(), ',') + 1;
		}
		if (c > 0)
		{
			puzzle = new Puzzle(w, h, c);
		}
		else
		{
			puzzle = new Puzzle(w, h, 1);
		}
		puzzle = new Puzzle(w, h, c);
		puzzle->bgColor = DEFAULTBGCOLOR;

		if (c > 0)
		{
			istringstream bgColorChecker(line);
			if (count(line.begin(), line.end(), '|') > 0)
			{
				getline(bgColorChecker, element, '|');
				puzzle->bgColor = colorHexToRgb(element);
				getline(bgColorChecker, line, '|');
			}
			istringstream colorDim(line);
			int i = 0;
			while (getline(colorDim, element, ','))
			{
				puzzle->colors[i] = colorHexToRgb(element);
				i++;
			}
			getline(inputFile, line);
		}

		i = 0;
		while (getline(inputFile, line) && i < puzzle->_width)
		{
			puzzle->tomographyWidth->sizes[i] = count(line.begin(), line.end(), ',') + 1;
			puzzle->tomographyWidth->tomography[i] = new Tomograph*[puzzle->tomographyWidth->sizes[i]];
			istringstream dim(line);
			j = 0;
			while (getline(dim, element, ','))
			{
				if (element != "0")
				{
					if (c > 0)
					{
						istringstream colorDim(element);
						getline(colorDim, value, '|');
						getline(colorDim, color, '|');
						puzzle->tomographyWidth->tomography[i][j] = new Tomograph(stoi(value), stoi(color));
					}
					else
					{
						puzzle->tomographyWidth->tomography[i][j] = new Tomograph(stoi(element), 1);
					}
				}
				else
				{
					puzzle->tomographyWidth->tomography[i][j] = nullptr;
					puzzle->tomographyWidth->sizes[i] = 0;
				}
				j++;
			}
			i++;
		}

		i = 0;
		while (getline(inputFile, line) && i < puzzle->_height)
		{
			puzzle->tomographyHeight->sizes[i] = count(line.begin(), line.end(), ',') + 1;
			puzzle->tomographyHeight->tomography[i] = new Tomograph*[puzzle->tomographyHeight->sizes[i]];
			istringstream dim(line);
			j = 0;
			while (getline(dim, element, ','))
			{
				if (element != "0")
				{
					if (c > 0)
					{
						istringstream colorDim(element);
						getline(colorDim, value, '|');
						getline(colorDim, color, '|');
						puzzle->tomographyHeight->tomography[i][j] = new Tomograph(stoi(value), stoi(color));
					}
					else
					{
						puzzle->tomographyHeight->tomography[i][j] = new Tomograph(stoi(element), 1);
					}

				}
				else
				{
					puzzle->tomographyHeight->tomography[i][j] = nullptr;
					puzzle->tomographyHeight->sizes[i] = 0;
				}
				j++;
			}
			i++;
		}

		inputFile.close();
	}
	else
	{
		std::cout << "Cannot open file";
	}
}
void outputPicture(Puzzle* puzzle, string filePath)
{
	int i, j;
	ofstream outputFile(filePath);
	if (outputFile.is_open())
	{
		outputFile << "P3\n" << puzzle->_width << " " << puzzle->_height << "\n255" << endl;
		j = 0;
		while (j < puzzle->_height)
		{
			i = 0;
			while (i < puzzle->_width)
			{

				if (puzzle->theGrid[i][j] > 1)
				{
					outputFile << puzzle->colors[puzzle->theGrid[i][j] - 2];
				}
				else
				{
					outputFile << puzzle->bgColor;
				}
				i++;
			}
			outputFile << endl;

			j++;
		}

		outputFile.close();
	}
	else
	{
		std::cout << "Cannot open file";
	}
}

typedef struct Puzzle
{
	const int _width;
	const int _height;
} Puzzle;

int main()
{
	Puzzle* puzzle = NULL;

	char* inputFiles[] = {//"5x5rune.txt", 
						  /*"10x10tree.txt",
						  "12x12bee.txt",
						  "15x15trivial.txt",
						  "15x15turtle.txt",
						  //"15x20cock.txt",
						  "20x15goldfish.txt",*/
						  //"20x20peacock.txt",
						  //"25x25lion.txt",
						  //"80x80MichaelJackson.txt",  //Warning!!!
		"C5x5Target.txt",
		"C8x8Mushroom.txt",
		"C19x13BrazilFlag.txt",
		"C16x25Sakura.txt",
		"C18x25Match.txt",
		"C20x20Ladybug.txt",
		"C20x20Swan.txt"
	};
	//std::system("pause");

	for (int i = 0; i < sizeof(inputFiles) / sizeof(inputFiles[0]); i++)
	{
		inputFiles[i] = NONOPATH + inputFiles[i];
		readFile(puzzle, inputFiles[i]);
		puzzle->tomographyWidth->print();
		puzzle->tomographyHeight->print();
		puzzle->bruteForce();

		outputPicture(puzzle, inputFiles[i].substr(0, inputFiles[i].size() - 3) + "ppm");
		cout << inputFiles[i] << endl;
		delete puzzle;
	}



	std::system("pause");
	return 0;
}
char* colorHexToRgb(char hexColor[])  //
{
	int colorPart;
	char outColor[] = "";
	colorPart = (int)strtol(hexColor, NULL, 16);
	//stringstream ssColor(hexColor);
	//ssColor >> std::hex >> colorPart;
	sprintf(outColor, "%i %i %i ", ((colorPart >> 16) & 0xFF), ((colorPart >> 8) & 0xFF), ((colorPart) & 0xFF));
	/*outColor = std::to_string(((colorPart >> 16) & 0xFF));  // Extract the RR byte
	outColor += " ";
	outColor += std::to_string(((colorPart >> 8) & 0xFF));   // Extract the GG byte
	outColor += " ";
	outColor += std::to_string(((colorPart) & 0xFF));        // Extract the BB byte
	outColor += " ";*/
	return outColor;
}